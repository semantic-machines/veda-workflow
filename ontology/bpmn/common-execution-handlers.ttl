@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix v-s: <http://semantic-machines.com/veda/veda-schema/> .
@prefix v-ui: <http://semantic-machines.com/veda/veda-ui/> .
@prefix v-wf: <http://semantic-machines.com/veda/veda-workflow/> .
@prefix bpmn: <http://semantic-machines.com/veda/veda-bpmn/> .

@prefix s-wf: <http://semantic-machines.com/veda/simple-workflow/> .
@prefix d: <http://semantic-machines.com/veda/veda-data/> .
@prefix td: <http://semantic-machines.com/veda/test-data/> .

<http://semantic-machines.com/veda/common-execution-handlers>
  rdf:type owl:Ontology ;
  rdfs:label "Онтология системы Veda"@ru ;
  rdfs:label "Veda system ontology"@en ;
#  owl:versionInfo "1.3" ;
  v-s:loadPriority 6 ;
.

########################################################

bpmn:ProcessInstanceStartHandler
  rdf:type bpmn:ExecutionHandler ;
  rdfs:label "Обработчик события старта экземпляра процесса" ;
  bpmn:triggerByEvent "end" ;
#  bpmn:triggerByProcessDefinitionKey "SimpleTaskProcess" ;
  bpmn:triggerByElementType "startEvent";
#  bpmn:triggerByElementId "startEvent";
  bpmn:fetchEventData true ;
  bpmn:script """
/* Available variables:
 * ticket = superuser ticket
 * event = execution event
 * executionId = execution id
 * processInstanceId = process instance id
 * superProcessInstanceId = super process instance id
 * businessKey = process instance business key
 * processDefinitionKey = process definition id
 * elementType = execution element type
 * elementId = execution element id
 * execution = camunda execution object
 * variables = camunda execution variables object
 */

console.log('PROCESS INSTANCE STARTED', processDefinitionKey, processInstanceId, superProcessInstanceId, businessKey);

if (variables && variables.startForm && superProcessInstanceId === 'null') {
  const startFormVariable = JSON.parse(variables.startForm.value);
  const startForm_uri = startFormVariable['@'];
  const startForm = get_individual(veda.ticket, startForm_uri);

  // Create process instance individual
  const processInstance_uri = 'd:' + processInstanceId;
  const processInstance = {
    '@': processInstance_uri,
    'rdf:type': veda.Util.newUri('bpmn:ProcessInstance'),
    'bpmn:hasStartForm': veda.Util.newUri(startForm_uri),
    'bpmn:processDefinitionKey': veda.Util.newStr(processDefinitionKey),
    'bpmn:processInstanceId': veda.Util.newStr(processInstanceId),
    'bpmn:businessKey': veda.Util.newStr(businessKey),
    'bpmn:hasStatus': veda.Util.newUri('bpmn:Started'),
  };
  put_individual(veda.ticket, processInstance);

  // Link start form with process instance individual
  startForm['bpmn:hasProcessInstance'] = veda.Util.newUri(processInstance_uri);
  put_individual(veda.ticket, startForm);

  // Add process instance to start form group [R]
  veda.BPMN.addToGroup(startForm_uri, processInstance_uri, 'R');

  if (veda.Util.hasValue(startForm, 'bpmn:hasDocument')) {
    const document_uri = startForm['bpmn:hasDocument'][0].data;

    // Add start form to document group [R]
    veda.BPMN.addToGroup(document_uri, startForm_uri, 'R');

    // Create process started journal record
    const journal_uri = document_uri + 'j';
    const process_started_record_id = 'd:' + veda.Util.Sha256.hash('business key started' + businessKey);
    const process_started_record = {
      '@': process_started_record_id,
      'rdf:type': veda.Util.newUri('bpmn:ProcessStarted'),
      'bpmn:hasStartForm': veda.Util.newUri(startForm_uri),
      'bpmn:hasProcessInstance': veda.Util.newUri(processInstance_uri),
    };
    veda.BPMN.addToJournal(journal_uri, process_started_record);

    // Add journal record to parent journal record group [R]
    veda.BPMN.addToGroup(journal_uri, process_started_record['@'], 'R');
  }
}
  """ ;
.

bpmn:ProcessInstanceEndHandler
  rdf:type bpmn:ExecutionHandler ;
  rdfs:label "Обработчик события завершения экземпляра процесса" ;
  bpmn:triggerByEvent "end" ;
#  bpmn:triggerByProcessDefinitionKey "SimpleTaskProcess" ;
  bpmn:triggerByElementType "null", "endEvent";
#  bpmn:triggerByElementId "null";
  bpmn:fetchEventData false ;
  bpmn:script """
/* Available variables:
 * ticket = superuser ticket
 * event = execution event
 * executionId = execution id
 * processInstanceId = process instance id
 * superProcessInstanceId = super process instance id
 * businessKey = process instance business key
 * processDefinitionKey = process definition id
 * elementType = execution element type
 * elementId = execution element id
 * execution = camunda execution object
 * variables = camunda execution variables object
 */

console.log('PROCESS INSTANCE ENDED', processDefinitionKey, processInstanceId, superProcessInstanceId, businessKey);

if (superProcessInstanceId === 'null') {
  const processInstance_uri = 'd:' + processInstanceId;

  // Create process ended journal record
  const process_started_record_id = 'd:' + veda.Util.Sha256.hash('business key started' + businessKey);
  const process_ended_record_id = 'd:' + veda.Util.Sha256.hash('business key ended' + businessKey);
  const process_ended_record = {
    '@': process_ended_record_id,
    'rdf:type': veda.Util.newUri('bpmn:ProcessEnded'),
    'bpmn:hasProcessInstance': veda.Util.newUri(processInstance_uri),
  };
  veda.BPMN.addToJournal(process_started_record_id, process_ended_record);

  // Add journal record to parent journal record group [R]
  veda.BPMN.addToGroup(process_started_record_id, process_ended_record['@'], 'R');

  // Update status in process instance individual
  const processInstance = get_individual(veda.ticket, processInstance_uri);
  processInstance['bpmn:hasStatus'] = veda.Util.newUri('bpmn:Finished');
  put_individual(veda.ticket, processInstance);
}
  """ ;
.
