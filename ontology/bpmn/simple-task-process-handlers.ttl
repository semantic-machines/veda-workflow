@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix v-s: <http://semantic-machines.com/veda/veda-schema/> .
@prefix v-ui: <http://semantic-machines.com/veda/veda-ui/> .
@prefix v-wf: <http://semantic-machines.com/veda/veda-workflow/> .
@prefix bpmn: <http://semantic-machines.com/veda/veda-bpmn/> .

@prefix s-wf: <http://semantic-machines.com/veda/simple-workflow/> .
@prefix d: <http://semantic-machines.com/veda/veda-data/> .
@prefix td: <http://semantic-machines.com/veda/test-data/> .

<http://semantic-machines.com/veda/simple-task-process-handlers>
  rdf:type owl:Ontology ;
  rdfs:label "Онтология системы Veda"@ru ;
  rdfs:label "Veda system ontology"@en ;
#  owl:versionInfo "1.3" ;
  v-s:loadPriority 6 ;
.

# ------------------------------------------------------------

bpmn:SetPropertyHandler
  rdf:type bpmn:ExternalTaskHandler ;
  rdfs:label "Обработчик топика 'setProperty'" ;
  bpmn:triggerByTopic "setProperty" ;
  bpmn:script """
/* Available variables:
 * ticket = superuser ticket
 * task = camunda task JSON
 */

console.log('SET PROPERTY');

const object = task.variables.object.value;
const property = task.variables.property.value;
const value = task.variables.value.value;

console.log(object, property, value);

const individual = new veda.IndividualModel(object);
individual.set(property, value);
individual.save();

return {
  setProperty: {
    value: 'success',
    type: 'String',
  },
};
  """ ;
.

# ------------------------------------------------------------

bpmn:SetRightsHandler
  rdf:type bpmn:ExternalTaskHandler ;
  rdfs:label "Обработчик топика 'setRights'" ;
  bpmn:triggerByTopic "setRights" ;
  bpmn:script """
/* Available variables:
 * ticket = superuser ticket
 * task = camunda task JSON
 */

console.log('SET RIGHTS');

const subject = task.variables.subject.value;
const object = task.variables.object.value;
let permission = task.variables.permission.value;

permission = permission.split('').map(char => {
  return char === 'c' ? 'v-s:canCreate' :
         char === 'r' ? 'v-s:canRead' :
         char === 'u' ? 'v-s:canUpdate' :
         char === 'd' ? 'v-s:canDelete' :
         undefined;
}).filter(Boolean);

console.log(subject, object, permission);
veda.Util.addRight(ticket, subject, object, permission);

return {
  setRights: {
    value: 'success',
    type: 'String',
  },
};
  """ ;
.

# ------------------------------------------------------------

bpmn:AssignmentHandler
  rdf:type bpmn:UserTaskHandler ;
  rdfs:label "Обработчик события 'assignment'" ;
  bpmn:triggerByEvent "assignment" ;
  bpmn:script """
/* Available variables:
 * ticket = superuser ticket
 * task = camunda task JSON
 * variables = camunda task variables
 * form_variables = camunda form variables
 */

console.log('CREATE TASK');

const from_appointment = new veda.IndividualModel(variables.from.value);
from_appointment.reset();
const from = [from_appointment['v-s:employee'][0], from_appointment['v-s:occupation'][0]];

const to_appointment = new veda.IndividualModel(variables.to.value);
to_appointment.reset();
const to = [to_appointment['v-s:employee'][0], to_appointment['v-s:occupation'][0]];

const userTask = new veda.IndividualModel();
userTask['rdf:type'] = ['v-wf:DecisionForm', 'bpmn:DecisionForm'];
userTask['rdfs:label'] = variables.label.value;
userTask['rdfs:comment'] = variables.comment.value;
userTask['bpmn:taskId'] = task.id;
userTask['bpmn:processInstanceId'] = task.processInstanceId;
userTask['v-wf:possibleDecisionClass'] = variables['v-wf:possibleDecisionClass'].value.replace(/\\s+/g, '').split(',');
userTask['v-s:creator'] = 'cfg:VedaSystem';
userTask['v-wf:from'] = from;
userTask['v-wf:to'] = to;
userTask['v-wf:isCompleted'] = false ;
userTask['v-wf:onDocument'] = variables.document.value ;
console.log('userTask', JSON.stringify(userTask.properties, null, 2));

userTask.save();

  """ ;
.

# ------------------------------------------------------------

bpmn:ProcessInstanceStartHandler
  rdf:type bpmn:ProcessInstanceHandler ;
  rdfs:label "Обработчик события старта экземпляра процесса" ;
  bpmn:triggerByEvent "start" ;
  bpmn:script """
/* Available variables:
 * ticket = superuser ticket
 * processInstance = camunda process JSON
 */

console.log('PROCESS INSTANCE STARTED', JSON.stringify(processInstance));

  """ ;
.

bpmn:ProcessInstanceEndHandler
  rdf:type bpmn:ProcessInstanceHandler ;
  rdfs:label "Обработчик события завершения экземпляра процесса" ;
  bpmn:triggerByEvent "start" ;
  bpmn:script """
/* Available variables:
 * ticket = superuser ticket
 * processInstance = camunda process JSON
 */

console.log('PROCESS INSTANCE ENDED', JSON.stringify(processInstance));

const queryString = `'rdf:type'==='bpmn:DecisionForm' && 'bpmn:processInstanceId'=='${processInstance.id}' && 'v-wf:isCompleted'==false`;
veda.Backend.query(veda.ticket, queryString).then(queryResult => {
  const tasks = queryResult.result;
  tasks.forEach(task => {
    veda.Backend.remove_individual(veda.ticket, task)
      .then(() => console.log(`Task removed for stopped process instance, task = ${task}, process = ${processInstance.id}`))
      .catch(error => console.log(`Error removing task for stopped process, task = ${task}, process = ${processInstance.id}`, error.stack));
  });
});

  """ ;
.
